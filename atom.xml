<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mingwei]]></title>
  <link href="http://andyyang.github.io/atom.xml" rel="self"/>
  <link href="http://andyyang.github.io/"/>
  <updated>2014-02-17T02:04:42+08:00</updated>
  <id>http://andyyang.github.io/</id>
  <author>
    <name><![CDATA[Mingwei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[《打造Facebook》的读书笔记]]></title>
    <link href="http://andyyang.github.io/blog/2014/02/16/building-facebook/"/>
    <updated>2014-02-16T12:34:00+08:00</updated>
    <id>http://andyyang.github.io/blog/2014/02/16/building-facebook</id>
    <content type="html"><![CDATA[<p>利用每天早上的零散时间把《打造Facebook》读完了。虽然大的行距让该书有些凑页数的嫌疑，但是关于新兵训练营、工具文化、导师文化以及开发流程，该书提供了很多实在的内容，可以让大家深入地了解Facebook乃至硅谷的公司文化。</p>

<h2>新兵训练营</h2>

<p>由Bosworth在2008年推动的新兵训练营是为了让新工程师认识公司里面相关的人，了解公司的文化、技术与产品，从而迅速地融入Facebook，并找到适合自己能力和兴趣的小组，即确定自己的具体工作职能。新兵训练营持续六周，前三周要上一些课程，包括公司及各个部门的概况，重要产品、常用技术框架和技术工具的介绍，以及公司的运营、商业模式的介绍，这些与大部分公司的入职培训类似，但是新兵训练营的不同之处在于：</p>

<ol>
<li>从第一周开始，所有新人60%以上的时间都要用在修复代码错误上面，在第一天就提交代码，在周二就参与每周例行的代码发布活动。Facebook相信让工程师融入公司的最好办法就是通过代码的交流。</li>
<li>新加入的工程师大部分都没有确定工作职能，因此从第三周开始，新人就开始接触需要招人的组，参加这些组的会议和讨论，然后每一周都要选出他感兴趣的组，进一步缩小范围，直到第六周时只剩一个备选组。</li>
<li>新兵训练营的导师是自愿性质的，也可以由老板推荐，需要对公司文化有较强的认识，一般要在公司待一年以上。训练营也是经理培训班，所有升职为经理的候选人必须至少做一期训练营的导师。</li>
<li>导师每周和新员工做“一对一”的重点讨论，每周参加导师碰头会，分配代码错误给新员工进行修改。新员工遇到任何困难都可以寻求导师帮助，但对于具体产品的技术性问题，Facebook不建议导师进行深入的帮助，关键是教给新员工方法、理念、文化上的东西。</li>
<li>Bosworth与工程总监们组成的委员会讨论每个组的用人优先度。导师与需要招人的那些组进行沟通，帮助新人进行初选。通常需要招人的经理进行“推销”，而新员工在“面试”那些组，最后由新员工决定自己去哪个组。一般新员工选定的组都会接收他，不能拒绝。</li>
</ol>


<h2>黑客之道（Hacker Way）</h2>

<p>黑客文化是一种持续改进和衍变创新的做事方法。“黑客之道”成为Facebook独一无二的企业文化和管理方式，Zuckerberg在公司IPO前夕的公开信中做了详尽的阐述。其中的“Done is better than perfect”和“Code wins arguments”这两句被广为流传。</p>

<h3>工程师驱动文化</h3>

<p>Facebook的工程师会花很多时间去思考产品为什么要这样做，要去思考、设计和跟产品经理合作。产品工程师与产品经理影响力的比重可能是60:40，而对于后台系统几乎是100:0。Facebook想让工程师来主导产品开发，这样才能激起他们的责任感，围绕产品进行全方位的思考。每月的跨部门会议上，由工程师来汇报进度；对于产品功能优先级的选择，鼓励由工程师做出决定。</p>

<h3>产品开发的三个准则</h3>

<ol>
<li>迅速发布，再进行监测</li>
<li>坦然对待不确定性</li>
<li>不追求极致，应该不断地发布以达到目标</li>
</ol>


<p>要重视数据而不盲从数据。决定产品方向时，要的是想象力、激情和胆量；而没有数据的支持而一味靠直觉走黑路，很容易走岔道。</p>

<h3>工具文化</h3>

<p>前Facebook总监黄易山强调，公司要把最好的人才放到工具开发那一块，因为工具做好了，可以达到事半功倍的效果，所有人的效率都可以得到提高。Facebook有两个工具组：</p>

<ol>
<li>研发工具组：包括所有有助于工程师开发速度和质量的工具，如代码审查工具、灰度发布工具、数据监测工具等。</li>
<li>网站支持和工具组：主要负责公司里所有通用工具的开发和维护，关注的是如何方便用户和Facebook的交流以及Facebook内部的沟通。</li>
</ol>


<h3>Hack-A-Month计划，重燃工作激情</h3>

<p>对于整个公司而言，内部的流动有利于重新激发牛人的战斗精神，而且不同业务背景的牛人可能在新组中带来全新的思路，产生意想不到的火花。Hack-A-Month计划就是允许工程师参与到另外一个组的项目之中，连续工作一个月。在这一个月的时间里，除了每周例行的和自己老板的一对一碰头会之外，原则上不需要对自己组里的任何事情操心。一个月之后，如果该工程师和工作一个月的组都满意对方，那么该工程师就可以正式换组。当然，Hack-A-Month计划也有一些规则，比如工程师必须在当前岗位待了一年以上，必须是一名优秀的工程师，两次Hack-A-Month的间隔要超过半年以上等。</p>

<h2>导师文化</h2>

<p>导师文化在美国十分盛行。导师（Mentor）就是一位生活中的朋友，他愿意在某一方面帮你提高，这里强调的是真心帮助，而非师和生的关系。如果有一位导师能够真心诚意地提供他的经验和建议，你就可能找到更高效的成长方式。如何去寻找导师，并与之相处？</p>

<ol>
<li>双方是朋友</li>
<li>在某一领域能够帮你提高自己的价值</li>
<li>要积极主动去寻找</li>
<li>非常尊重导师的时间，在交流之前做好准备，带着话题和案例前去</li>
<li>对每次和导师的交流进行总结和记录</li>
</ol>


<h2>开发流程</h2>

<p>所谓的流程在Facebook内部并不存在。对于不同类型的项目，有些对时间要求高一些，更强调速度；有些对质量要求高一些，更强调项目管理的流程。</p>

<ol>
<li>描绘远景，设置目标

<ul>
<li>遵循SMART规则</li>
</ul>
</li>
<li>收集想法并排出优先次序

<ul>
<li>头脑风暴</li>
<li>Top X规则：只做对目标最有影响的前X项。</li>
<li>时间分配6-2-2原则：60%时间花在那些能够预期的工作上，20%的时间花在后台架构和产品质量上，20%的时间花在那些比较有风险、有争议的、可能会带来某种颠覆性后果的想法上。</li>
<li>季度性计划主要是指导性的，月计划是把全局观和实际情况较好地进行结合的一个平衡。</li>
<li>围绕每个想法的影响力进行辩论：从全局的角度思考每个想法的影响，再把自己的想法加入到全局的考量之中。</li>
<li>120%规则：挑选出来的想法大概是团队可承受范围的120%左右。</li>
<li>保证一些底层架构和产品质量的工作是在这些想法之中的。</li>
<li>在wiki工具上公布项目计划并进行项目管理：公开，容易分享；大家都能修改；对于最最重要的目标会在黑板的一边列出来，并用温度计的样子来显示完成的进度。</li>
</ul>
</li>
<li>跨团队沟通

<ul>
<li>不同职能之间的沟通，相关的工程兄弟组之间的沟通。</li>
<li>跨团队沟通的最大目的是避免执行时出现“意外惊吓”。提前沟通显示了对别人的尊重与良好的合作意愿。</li>
</ul>
</li>
<li>告知所有可能关心的人

<ul>
<li>让所有可能关心的人都清楚这个计划，给他们一个参与的机会去了解“这个组究竟在做些什么工作”。</li>
</ul>
</li>
<li>设计产品

<ul>
<li>在功能、预期完成时间、预算、完成质量四个维度之间进行妥协，达到一个平衡状态。</li>
<li>产品预览（Product Review）：工程师、产品经理、设计师讨论为什么做这个产品、产品的核心功能、主要界面等，并尽可能给大家展示设计的页面（Mock-up）。</li>
<li>技术预览（Technical Review）：对于技术性的系统或框架，邀请有相关经验的后台工程师参加，利用Facebook优秀的技术资源，保证一个系统没有大的设计缺陷。</li>
<li>有好的开源系统或商用产品，就用开源或商用的；必须自己开发的或者跟Facebook核心竞争力息息相关的，就集中力量开发一套，而不是重复劳动，开发多套类似系统。</li>
<li>产品设计的基本理念：

<ul>
<li>不要过度设计</li>
<li>产品越简单越好，但不意味着简陋</li>
<li>对于自己做出来的产品，你必须时它的用户</li>
<li>产品要确实有用，主要流程尽可能顺畅</li>
<li>不追求完美</li>
<li>保留最基本的质量底线</li>
</ul>
</li>
</ul>
</li>
<li>指定项目责任人

<ul>
<li>对于每一个项目，一般都由一个工程师作为明确的责任人，这个责任人要负责推动该项目的进展。</li>
<li>锻炼员工的才能。</li>
</ul>
</li>
<li>定期碰头会

<ul>
<li>根据项目的紧急性和重要程度定期讨论项目所有的相关任务及其进展。</li>
</ul>
</li>
<li>了解进度，汇总报告

<ul>
<li>每周例会，工作在不同项目的组员可以借此进行沟通和交流，让大家清楚整个组正在进行的所有项目的状态。</li>
<li>研发经理每周五把组里当前所有项目的进展情况汇总成简报发送给所有的关注人。</li>
<li>简报应该能在一分钟之内被阅读完，简报的最开头一段列出这周核心数据的变化，简报只涉及组里最重要的3～5个项目。</li>
</ul>
</li>
<li>发布产品，监测数据

<ul>
<li>发布前评估（Pre-launch Review）：在发布之前，做一些如发布策略、需监测的核心数据、产品演示、核心算法改变等方面的讨论。</li>
<li>灰度发布：有所控制地选择发布的人群及其比例。</li>
<li>需要监测的两类数据：当前的系统状态（访问成功量、致命范围错误的量、访问速度等）；新功能的用户影响（是否提高了用户的点击率等）。</li>
<li>监测数据的收集、处理、存储、查询、展示以及实时警报。</li>
<li>Post-mortem：通过分析过去发生的问题，从中总结可以采取的行动方案，以避免类似的错误再次发生。</li>
</ul>
</li>
</ol>


<h2>招聘永远是第一位的</h2>

<ol>
<li>Facebook招聘工程师时，很少是针对特定职位进行具体招聘的，大部分都是招进来之后放进新兵训练营，然后再确定具体的工作职责。</li>
<li>在进行正式面试时，一般都是根据应聘者的大致背景和特点，挑出与其背景比较吻合的几位工程师来参与。</li>
<li>Facebook的招聘标准：只和最好的人合作。</li>
<li>找到一流人才的途径：内部推荐和收购。</li>
<li>招聘是竞争的第一步，业内一流人才如果没有进入你的公司，那他们就在竞争对手的公司服务。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每周编程题：线程协同打印数字序列]]></title>
    <link href="http://andyyang.github.io/blog/2013/10/17/coding-interview-printing-number-sequence/"/>
    <updated>2013-10-17T00:55:00+08:00</updated>
    <id>http://andyyang.github.io/blog/2013/10/17/coding-interview-printing-number-sequence</id>
    <content type="html"><![CDATA[<h2>题目</h2>

<p>Write a program to print a number sequence from 1 to m with n threads. Each thread print one number at a time. The threads run in a round robin fashion.</p>

<p>Input: n = 10, m = 100</p>

<p>sample output:<br/>
Thread-1: 1<br/>
Thread-2: 2<br/>
&hellip;.<br/>
&hellip;.<br/>
Thread-10: 10<br/>
Thread-1: 11<br/>
Thread-2: 12<br/>
&hellip;.<br/>
&hellip;.<br/>
Thread-10: 20<br/>
Thread-1: 21<br/>
Thread-2: 22<br/>
&hellip;<br/>
&hellip;<br/>
Thread-10: 100</p>

<h2>分析</h2>

<p>这里需要多个线程轮流打印一个数字序列，因此这些线程需要协同工作，即线程1取数字k打印后暂停打印，线程2取下一个数字k+1继续打印，以此类推，线程10取数字k+9打印后，线程1又开始取数字k+10打印，直到序列中的所有数字都打印完。</p>

<p>本来准备在每个工作线程开始后在工作线程内部调用Thread.stop来暂停工作线程，然后在主线程中通过Thread#run唤醒第一个工作线程，并在之后通过Thread#join依次等待所有工作线程结束。但是由于Ruby线程模型的限制，这样的调用会产生错误信息&#8221;in `join&#8217;: No live threads left. Deadlock?&ldquo;，即Thread＃join导致主线程被挂起，同时调度运行其他的工作线程，如果此时所有的工作线程由于Thread.stop的调用而处于“睡眠”状态时，就会出现没有线程可以调度运行即死锁的问题。</p>

<p>解决办法是通过一个所有线程共享的变量来指示当前应该是哪个工作线程来运行，如果当前线程不是应该运行的工作线程，则该线程调用Thread.pass把执行权让给其他线程；如果当前线程是应该运行的工作线程，则在打印数字后将指示变量设置为下一个线程的序号。由于任何时候只有一个线程会设置该指示变量，因此不存在变量同步访问的问题。</p>

<h2>代码</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">size</span> <span class="o">!=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;usage: threads n m&quot;</span>
</span><span class='line'>  <span class="nb">exit</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_i</span>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">to_i</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">m</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;n and m must be lager than 0&quot;</span>
</span><span class='line'>  <span class="nb">exit</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">threads</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">current_thread</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="n">threads</span> <span class="o">&lt;&lt;</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">count</span> <span class="o">=</span> <span class="n">i</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">count</span> <span class="o">&lt;=</span> <span class="n">m</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">current_thread</span>
</span><span class='line'>        <span class="no">Thread</span><span class="o">.</span><span class="n">pass</span>
</span><span class='line'>        <span class="k">redo</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Thread</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">count</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">count</span> <span class="o">+=</span> <span class="n">n</span>
</span><span class='line'>      <span class="n">current_thread</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="p">?</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">threads</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby元编程惯用法]]></title>
    <link href="http://andyyang.github.io/blog/2013/10/07/spells-of-metaprogramming-ruby/"/>
    <updated>2013-10-07T23:00:00+08:00</updated>
    <id>http://andyyang.github.io/blog/2013/10/07/spells-of-metaprogramming-ruby</id>
    <content type="html"><![CDATA[<p>以下Ruby元编程的惯用法引用自<a href="http://pragprog.com/book/ppmetr/metaprogramming-ruby">《Metaprogramming Ruby》</a>，该书对Ruby元编程做了很好的总结，非常值得阅读。</p>

<h2>基本用法</h2>

<h3>Argument Array</h3>

<p>将参数列表收缩为一个数组。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_method</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">arg</span><span class="o">|</span> <span class="n">arg</span><span class="o">.</span><span class="n">reverse</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_method</span><span class="p">(</span><span class="s1">&#39;xyz&#39;</span><span class="p">,</span> <span class="s1">&#39;abc&#39;</span><span class="p">,</span> <span class="s1">&#39;123&#39;</span><span class="p">)</span> <span class="c1"># =&gt; [&#39;zyx&#39;, &#39;cba&#39;, &#39;321&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Mimic Method</h3>

<p>将一个方法假装为语言结构成分使用。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">BaseClass</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">name</span> <span class="o">==</span> <span class="s2">&quot;string&quot;</span> <span class="p">?</span> <span class="nb">String</span> <span class="p">:</span> <span class="no">Object</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span> <span class="o">&lt;</span> <span class="no">BaseClass</span> <span class="s2">&quot;string&quot;</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:an_attribute</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="n">C</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">an_attribute</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Monkeypatch</h3>

<p>改变一个已有类的特性。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;xyz&quot;</span><span class="o">.</span><span class="n">reverse</span> <span class="c1"># =&gt; &quot;zyx&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">reverse</span>
</span><span class='line'>    <span class="s2">&quot;override&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;xyz&quot;</span><span class="o">.</span><span class="n">reverse</span> <span class="c1"># =&gt; &quot;override&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Named Arguments</h3>

<p>将方法参数收集到一个hash中，通过名称识别参数。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_method</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="n">args</span><span class="o">[</span><span class="ss">:arg2</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_method</span><span class="p">(</span><span class="n">arg1</span> <span class="p">:</span> <span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="ss">arg2</span><span class="p">:</span> <span class="s2">&quot;B&quot;</span><span class="p">,</span> <span class="n">arg3</span> <span class="p">:</span> <span class="s2">&quot;C&quot;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;B&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Namespace</h3>

<p>在模块中定义常量以避免名称冲突。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MyNamespace</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Array</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">to_s</span>
</span><span class='line'>      <span class="s2">&quot;my class&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Array</span><span class="o">.</span><span class="n">new</span> <span class="c1"># =&gt; []</span>
</span><span class='line'><span class="ss">MyNamespace</span><span class="p">:</span><span class="ss">:Array</span><span class="o">.</span><span class="n">new</span> <span class="c1"># =&gt; &quot;my class&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Nil Guard</h3>

<p>通过or操作覆写nil引用。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">||</span> <span class="s2">&quot;a value&quot;</span> <span class="c1"># =&gt; &quot;a value&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Code Processor</h3>

<p>处理来自外部来源的Strings of Code。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">readlines</span><span class="p">(</span><span class="s2">&quot;a_file_containing_lines_of_ruby.txt&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">line</span><span class="o">.</span><span class="n">chomp</span><span class="si">}</span><span class="s2"> ==&gt; </span><span class="si">#{</span><span class="nb">eval</span><span class="p">(</span><span class="n">line</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &gt;&gt; 1 + 1 ==&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dynamic Dispatch</h3>

<p>在运行时决定调用哪个方法。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">method_to_call</span> <span class="o">=</span> <span class="ss">:reverse</span>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="s2">&quot;xyz&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">method_to_call</span><span class="p">)</span> <span class="c1"># =&gt; &quot;zyx&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Open Class</h3>

<p>修改已存在的类</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>    <span class="s1">&#39;my method&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;abc&quot;</span><span class="o">.</span><span class="n">my_method</span> <span class="c1"># =&gt; &quot;my method&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Ghost Method</h3>

<p>响应无相应方法的消息。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">reverse</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="n">C</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">my_ghost_method</span> <span class="c1"># =&gt; &quot;dohtem_tsohg_my&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Hook Method</h3>

<p>覆写一个方法以拦截对象模型的事件。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$INHERITORS</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">inherited</span><span class="p">(</span><span class="n">subclass</span><span class="p">)</span>
</span><span class='line'>    <span class="vg">$INHERITORS</span> <span class="o">&lt;&lt;</span> <span class="n">subclass</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">D</span> <span class="o">&lt;</span> <span class="n">C</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">E</span> <span class="o">&lt;</span> <span class="n">C</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">F</span> <span class="o">&lt;</span> <span class="n">E</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="vg">$INHERITORS</span> <span class="c1"># =&gt; [D, E, F]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Flat Scope</h3>

<p>通过closure在两个scope之间共享变量。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">an_attribute</span>
</span><span class='line'>    <span class="vi">@attr</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="n">C</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">a_variable</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">instance_eval</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@attr</span> <span class="o">=</span> <span class="n">a_variable</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">an_attribute</span> <span class="c1"># =&gt; 100 </span>
</span></code></pre></td></tr></table></div></figure>


<h3>Kernel Method</h3>

<p>在模块Kernel中定义一个方法以使该方法能在所有对象中都能使用。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Kernel</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">a_method</span>
</span><span class='line'>    <span class="s2">&quot;a kernel method&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">a_method</span> <span class="c1"># =&gt; &quot;a kernel method&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Scope Gate</h3>

<p>通过class、module或者def关键字隔离一个Scope。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">defined?</span> <span class="n">a</span> <span class="c1"># =&gt; &quot;local-variable&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">MyModule</span>
</span><span class='line'>  <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">defined?</span> <span class="n">a</span> <span class="c1"># =&gt; nil</span>
</span><span class='line'>  <span class="n">defined?</span> <span class="n">b</span> <span class="c1"># =&gt; &quot;local-variable&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">defined?</span> <span class="n">a</span> <span class="c1"># =&gt; &quot;local-variable&quot;</span>
</span><span class='line'><span class="n">defined?</span> <span class="n">b</span> <span class="c1"># =&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Self Yield</h3>

<p>将self传入当前的block。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:surname</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">slef</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">joe</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span>
</span><span class='line'> <span class="nb">p</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Joe&#39;</span>
</span><span class='line'> <span class="nb">p</span><span class="o">.</span><span class="n">surname</span> <span class="o">=</span> <span class="s1">&#39;Smith&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Singleton Method</h3>

<p>对单独的一个对象定义方法。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="s2">&quot;xyz&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="n">obj</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_singleton_method</span>
</span><span class='line'>    <span class="s2">&quot;a&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">my_singleton_method</span> <span class="c1"># =&gt; &quot;a&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>String of Code</h3>

<p>解析一个Ruby代码字符串。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_string_of_code</span> <span class="o">=</span> <span class="s2">&quot;1 + 2&quot;</span>
</span><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="n">my_string_of_code</span><span class="p">)</span> <span class="c1"># =&gt; 3</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Symbol To Proc</h3>

<p>将一个symbol转换为一个block，该block调用单独的一个方法。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:even?</span><span class="p">)</span> <span class="c1"># =&gt; [false, true, false, true]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>进阶用法</h2>

<h3>Around Alias</h3>

<p>为一个方法指定别名，并在重新定义该方法时调用之前被别名的方法。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="k">alias</span> <span class="ss">:old_reverse</span> <span class="ss">:reverse</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">reverse</span>
</span><span class='line'>    <span class="s2">&quot;t</span><span class="si">#{</span><span class="n">old_reverse</span><span class="si">}</span><span class="s2">t&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;123&quot;</span><span class="o">.</span><span class="n">reverse</span> <span class="c1"># =&gt; &quot;t321t&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Blank Slate</h3>

<p>将方法从对象中删除，使这些方法成为Ghost Methods。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="s2">&quot;a Ghost Method&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">instance_methods</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class='line'>    <span class="n">undef_method</span> <span class="n">m</span> <span class="k">unless</span> <span class="n">m</span><span class="o">.</span><span class="n">to_s</span> <span class="o">=~</span> <span class="sr">/method_missing|respond_to?|^__/</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="n">C</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">to_s</span> <span class="c1"># =&gt; &quot;a Ghost Method&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Class Extension</h3>

<p>通过类的eigenclass包含模块来定义类方法。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">M</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>    <span class="s2">&quot;a class method&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="n">C</span>
</span><span class='line'>  <span class="kp">include</span> <span class="n">M</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">C</span><span class="o">.</span><span class="n">my_method</span> <span class="c1"># =&gt; &quot;a class method&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Class Extension Mixin</h3>

<p>通过Hook Method让模块扩展包含该模块的类。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="n">base</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">ClassMethods</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>      <span class="s2">&quot;a class method&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="kp">include</span> <span class="n">M</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">C</span><span class="o">.</span><span class="n">my_method</span> <span class="c1"># =&gt; &quot;a class method&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Class Instance Variable</h3>

<p>将类层次的状态存储在Class对象的实例变量中。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="vi">@my_class_instance_variable</span> <span class="o">=</span> <span class="s2">&quot;some value&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">class_attribute</span>
</span><span class='line'>    <span class="vi">@my_class_instance_variable</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">C</span><span class="o">.</span><span class="n">class_attribute</span> <span class="c1"># =&gt; &quot;some value&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Class Macro</h3>

<p>在类定义中使用类方法。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="n">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_macro</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'>    <span class="s2">&quot;my_macro(</span><span class="si">#{</span><span class="n">arg</span><span class="si">}</span><span class="s2">) called&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="n">my_macro</span> <span class="ss">:x</span> <span class="c1"># =&gt; &quot;my_macro(x) called&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Clean Room</h3>

<p>将一个对象作为一个block计算的环境。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CleanRoom</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">a_useful_method</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">*</span> <span class="mi">3</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">CleanRoom</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">instance_eval</span> <span class="p">{</span> <span class="n">a_useful_method</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">}</span> <span class="c1"># =&gt; 9</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Context Probe</h3>

<p>在一个对象的上下文中执行一个block以获取信息。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@x</span> <span class="o">=</span> <span class="s2">&quot;a private instance variable&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="n">C</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">instance_eval</span> <span class="p">{</span> <span class="vi">@x</span> <span class="p">}</span> <span class="c1"># =&gt; &quot;a private instance variable&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Deferred Evaluation</h3>

<p>将一段代码及其上下文存储在一个proc或者lambda中以用于以后的计算。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">store</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@my_code_capsule</span> <span class="o">=</span> <span class="n">block</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">execute</span>
</span><span class='line'>    <span class="vi">@my_code_capsule</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="n">C</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">store</span> <span class="p">{</span> <span class="vg">$X</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="vg">$X</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">execute</span>
</span><span class='line'><span class="vg">$X</span> <span class="c1"># =&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dynamic Method</h3>

<p>确定如何在运行时定义一个方法。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">C</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">define_method</span> <span class="ss">:my_method</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;a dynamic method&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="n">C</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">my_method</span> <span class="c1"># =&gt; &quot;a dynamic method&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dynamic Proxy</h3>

<p>将不匹配的方法调用发送给另一个对象。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyDynamicProxy</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@target</span> <span class="o">=</span> <span class="n">target</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>     <span class="s2">&quot;result: </span><span class="si">#{</span><span class="vi">@target</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="no">MyDynamicProxy</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;a string&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">reverse</span> <span class="c1"># =&gt; &quot;result: gnirts a&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Lazy Instance Variable</h3>

<p>直到第一次访问一个实例变量时才对该实例变量进行初始化。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">attribute</span>
</span><span class='line'>    <span class="vi">@attribute</span> <span class="o">=</span> <span class="vi">@attribute</span> <span class="o">||</span> <span class="s2">&quot;some value&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="n">C</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">attribute</span> <span class="c1"># =&gt; &quot;some value&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Object Extension</h3>

<p>将一个模块Mixin到一个对象的Eigenclass中以定义Singleton Method。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">M</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>    <span class="s1">&#39;a singleton method&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="n">obj</span>
</span><span class='line'>  <span class="kp">include</span> <span class="n">M</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">my_method</span> <span class="c1"># =&gt; &quot;a singleton method&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Pattern Dispatch</h3>

<p>根据方法的名称选择调用哪个方法。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$x</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_first_method</span>
</span><span class='line'>    <span class="vg">$x</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_second_method</span>
</span><span class='line'>    <span class="vg">$x</span> <span class="o">+=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="n">C</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">methods</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class='line'>  <span class="n">obj</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="k">if</span> <span class="n">m</span><span class="o">.</span><span class="n">to_s</span> <span class="o">=~</span> <span class="sr">/^my_/</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="vg">$x</span> <span class="c1"># =&gt; 3</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Sandbox</h3>

<p>在一个安全环境中执行非可信代码。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">sandbox</span><span class="p">(</span><span class="o">&amp;</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">proc</span> <span class="p">{</span>
</span><span class='line'>    <span class="vg">$SAFE</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">yield</span>
</span><span class='line'>  <span class="p">}</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">sandbox</span> <span class="p">{</span> <span class="no">File</span><span class="o">.</span><span class="n">delete</span> <span class="s1">&#39;a_file&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">ex</span>
</span><span class='line'>  <span class="n">ex</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Shared Scope</h3>

<p>在同一个Flat Scope的多个上下文中共享变量。其他方法见不到这些变量。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">lambda</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">shared</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">define_method</span> <span class="ss">:counter</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">shared</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">define_method</span> <span class="ss">:down</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">shared</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="p">}</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>
</span><span class='line'><span class="n">counter</span> <span class="c1"># =&gt; 10</span>
</span><span class='line'><span class="mi">3</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">down</span> <span class="p">}</span>
</span><span class='line'><span class="n">counter</span> <span class="c1"># =&gt; 7</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每周编程题：一个都不能少]]></title>
    <link href="http://andyyang.github.io/blog/2013/07/22/coding-interview-not-one-less/"/>
    <updated>2013-07-22T01:42:00+08:00</updated>
    <id>http://andyyang.github.io/blog/2013/07/22/coding-interview-not-one-less</id>
    <content type="html"><![CDATA[<h2><a href="http://t.cn/zQGvysV">原题</a></h2>

<p>有k个有序的数组，请找到一个最小的数字范围，使得这k个有序数组中，每个数组都至少有一个数字在该范围中。 例如：</p>

<ul>
<li>数组1：4, 10, 15, 24, 26</li>
<li>数组2：0,  9, 12, 20</li>
<li>数组3：5, 18, 22, 30</li>
</ul>


<p>则所得最小范围为[20,24]，其中，20在数组2中，22在数组3中，24在数组1中。</p>

<h2>代码</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">def</span> <span class="nf">find_min_range</span><span class="p">(</span><span class="n">arrays</span><span class="p">)</span>
</span><span class='line'>    <span class="n">k</span> <span class="o">=</span> <span class="n">arrays</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>    <span class="n">min_range</span> <span class="o">=</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="n">range</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="p">{</span><span class="ss">value</span><span class="p">:</span><span class="n">arrays</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="ss">index</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span> <span class="ss">pos</span><span class="p">:</span><span class="n">i</span><span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="k">while</span> <span class="kp">true</span>
</span><span class='line'>      <span class="n">range</span><span class="o">.</span><span class="n">sort_by!</span> <span class="p">{</span><span class="o">|</span><span class="n">elem</span><span class="o">|</span> <span class="n">elem</span><span class="o">[</span><span class="ss">:value</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">range</span><span class="o">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="ss">:value</span><span class="o">]</span> <span class="o">-</span> <span class="n">range</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="ss">:value</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">min_range</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">min_range</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">||</span>
</span><span class='line'>         <span class="n">min_range</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">min_range</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&lt;</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">min_range</span> <span class="o">=</span> <span class="o">[</span><span class="n">range</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="ss">:value</span><span class="o">]</span><span class="p">,</span> <span class="n">range</span><span class="o">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="ss">:value</span><span class="o">]]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">min</span> <span class="o">=</span> <span class="n">range</span><span class="o">.</span><span class="n">shift</span>
</span><span class='line'>      <span class="n">index</span> <span class="o">=</span> <span class="n">min</span><span class="o">[</span><span class="ss">:index</span><span class="o">]</span>
</span><span class='line'>      <span class="n">pos</span> <span class="o">=</span> <span class="n">min</span><span class="o">[</span><span class="ss">:pos</span><span class="o">]</span>
</span><span class='line'>      <span class="k">break</span> <span class="k">if</span> <span class="n">index</span> <span class="o">&gt;=</span> <span class="n">arrays</span><span class="o">[</span><span class="n">pos</span><span class="o">].</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">range</span><span class="o">.</span><span class="n">push</span><span class="p">({</span><span class="ss">value</span><span class="p">:</span><span class="n">arrays</span><span class="o">[</span><span class="n">pos</span><span class="o">][</span><span class="n">index</span><span class="o">]</span><span class="p">,</span> <span class="ss">index</span><span class="p">:</span><span class="n">index</span><span class="p">,</span> <span class="ss">pos</span><span class="p">:</span><span class="n">pos</span><span class="p">})</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">min_range</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">find_min_range</span><span class="p">(</span><span class="o">[[</span><span class="mi">4</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">24</span><span class="p">,</span><span class="mi">26</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">20</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">30</span><span class="o">]]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
